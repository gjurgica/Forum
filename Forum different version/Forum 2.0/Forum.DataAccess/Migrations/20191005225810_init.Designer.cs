// <auto-generated />
using System;
using Forum.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Forum.DataAccess.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    [Migration("20191005225810_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Forum.DomainClasses.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = "a56c3037-cf88-4376-87e2-d370633a459c", Title = "Software" },
                        new { Id = "97024e2b-6640-4be6-b68f-3f95abe60fd7", Title = "Games" },
                        new { Id = "402e1af8-5fb3-408b-9924-6d61abb0e462", Title = "News" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ThreadId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new { Id = "59b79b59-9b42-4399-a449-acf7b92128d8", Content = "The best free antivirus is Kaspersky Cloud Free", DateCreated = new DateTime(2019, 10, 5, 22, 58, 10, 502, DateTimeKind.Utc), ThreadId = "b3c968d8-5283-407e-ad74-701c32baf227", UserId = "9a7b3cd6-2fb4-4f44-b69b-ba6f8fd405ea" },
                        new { Id = "ac68cd63-b534-4524-b183-e2ab232a24f7", Content = "Avast is another good free antivirus", DateCreated = new DateTime(2019, 10, 5, 22, 58, 10, 502, DateTimeKind.Utc), ThreadId = "b3c968d8-5283-407e-ad74-701c32baf227", UserId = "5517938e-0e1b-451c-8808-714db25ebfd8" },
                        new { Id = "d4b93b4c-62cb-49ef-9ef8-890368aea70e", Content = "I hope they've pathed some of the security holes", DateCreated = new DateTime(2019, 10, 5, 22, 58, 10, 502, DateTimeKind.Utc), ThreadId = "398e04e8-d425-4199-bd0a-79a4a98eb582", UserId = "5517938e-0e1b-451c-8808-714db25ebfd8" },
                        new { Id = "e6c11ac6-92cc-425e-bcfd-d6a49169827e", Content = "Call of Duty: Modern Warfare is the best one so far.", DateCreated = new DateTime(2019, 10, 5, 22, 58, 10, 502, DateTimeKind.Utc), ThreadId = "3bb74f8a-4741-4cc1-8f90-1e2c1139c7fc", UserId = "9c50eeec-0068-44bd-8b60-ac6fface69c2" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.PrivateMessage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<string>("receiverId")
                        .IsRequired();

                    b.Property<string>("senderId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("receiverId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Threads");

                    b.HasData(
                        new { Id = "b3c968d8-5283-407e-ad74-701c32baf227", CategoryId = "a56c3037-cf88-4376-87e2-d370633a459c", DateCreated = new DateTime(2019, 10, 6, 0, 58, 10, 502, DateTimeKind.Local), Title = "Best Free AV" },
                        new { Id = "398e04e8-d425-4199-bd0a-79a4a98eb582", CategoryId = "402e1af8-5fb3-408b-9924-6d61abb0e462", DateCreated = new DateTime(2019, 10, 6, 0, 58, 10, 502, DateTimeKind.Local), Title = "New version of FireFox is released" },
                        new { Id = "3bb74f8a-4741-4cc1-8f90-1e2c1139c7fc", CategoryId = "97024e2b-6640-4be6-b68f-3f95abe60fd7", DateCreated = new DateTime(2019, 10, 6, 0, 58, 10, 502, DateTimeKind.Local), Title = "The best FPS game in 2019" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsItOnline");

                    b.Property<DateTime>("Joined");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "5517938e-0e1b-451c-8808-714db25ebfd8", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "c910355c-da2a-44a6-98a5-bceb74b98b16", Email = "ga@forum.com", EmailConfirmed = true, FullName = "Gjurgica Anastasovska", IsItOnline = false, Joined = new DateTime(2019, 10, 6, 0, 58, 10, 482, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "GA@FORUM.COM", NormalizedUserName = "GJURGICA", PasswordHash = "AQAAAAEAACcQAAAAENS5VAI1ezO8mABCVx7cL/PwTZYhROsGJBUtuxMLdpP3zTmcgMyeROP26/3RB6R5qg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "gjurgica" },
                        new { Id = "9c50eeec-0068-44bd-8b60-ac6fface69c2", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "d7bf0ad1-391c-40ed-90c3-292894bdc339", Email = "fm@forum.com", EmailConfirmed = true, FullName = "Florent Memedi", IsItOnline = false, Joined = new DateTime(2019, 10, 6, 0, 58, 10, 493, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "FM@FORUM.COM", NormalizedUserName = "FLORENT", PasswordHash = "AQAAAAEAACcQAAAAEHCsXRH9dtRskldO6lBFLwOjhmGdh7rQM/FUqcA1on4HWw19UCuRkadC/AkWOcpzxw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "florent" },
                        new { Id = "9a7b3cd6-2fb4-4f44-b69b-ba6f8fd405ea", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "d2b09fa2-078a-4143-b8a5-08f8c0731d18", Email = "vp@forum.com", EmailConfirmed = true, FullName = "Vladimir Prokopiev", IsItOnline = false, Joined = new DateTime(2019, 10, 6, 0, 58, 10, 501, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "VP@FORUM.COM", NormalizedUserName = "VLADIMIR", PasswordHash = "AQAAAAEAACcQAAAAEHLEpPAH7WXP4OP3CFWlbPZ01cpM/xG1cUGKW+29Vf7wv4apmdPlSQMmkz3yklqX5Q==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "vladimir" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "55203503-3618-4d3b-9574-4d3411e42465", ConcurrencyStamp = "dbc90da9-bbb6-4144-bbde-30f356969d7f", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "6f37b68b-6088-4dbf-8688-fbee8c5e1fdb", ConcurrencyStamp = "a3157ef4-aa56-4a43-b3dc-81a307d3e22f", Name = "user", NormalizedName = "USER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "9a7b3cd6-2fb4-4f44-b69b-ba6f8fd405ea", RoleId = "55203503-3618-4d3b-9574-4d3411e42465" },
                        new { UserId = "5517938e-0e1b-451c-8808-714db25ebfd8", RoleId = "55203503-3618-4d3b-9574-4d3411e42465" },
                        new { UserId = "9c50eeec-0068-44bd-8b60-ac6fface69c2", RoleId = "55203503-3618-4d3b-9574-4d3411e42465" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Thread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.PrivateMessage", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("receiverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Category", "Category")
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
