// <auto-generated />
using System;
using Forum.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Forum.DataAccess.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    partial class ForumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Forum.DomainClasses.Models.Alert", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PostId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = "6378176c-7cdc-4244-9b01-9b8393d40def", Title = "Software" },
                        new { Id = "8418e314-2f90-4927-a8f1-75676a0044c8", Title = "Games" },
                        new { Id = "2a8b43b5-306f-4561-b32e-69018b8e6a69", Title = "News" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ThreadId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new { Id = "9032b9b6-6da1-489b-87a5-1454f98ceaaa", Content = "The best free antivirus is Kaspersky Cloud Free", DateCreated = new DateTime(2019, 10, 7, 19, 47, 44, 371, DateTimeKind.Utc), ThreadId = "097b47f6-2ca9-482a-a5ea-49c15e5112ab", UserId = "7d61ae6a-c786-497e-9955-b144476f596f" },
                        new { Id = "71edf604-f239-49f6-bd72-fd192f0f242b", Content = "Avast is another good free antivirus", DateCreated = new DateTime(2019, 10, 7, 19, 47, 44, 371, DateTimeKind.Utc), ThreadId = "097b47f6-2ca9-482a-a5ea-49c15e5112ab", UserId = "f6a3b03d-90b8-4dd4-ab61-1d93e22bc3ef" },
                        new { Id = "a5c9e54c-efbd-4740-84d8-ae59b57dd8bd", Content = "I hope they've pathed some of the security holes", DateCreated = new DateTime(2019, 10, 7, 19, 47, 44, 371, DateTimeKind.Utc), ThreadId = "fab5cc4d-3c42-419a-a547-dbd49d41d451", UserId = "f6a3b03d-90b8-4dd4-ab61-1d93e22bc3ef" },
                        new { Id = "b8426a2a-f293-4d42-a777-4676a3384237", Content = "Call of Duty: Modern Warfare is the best one so far.", DateCreated = new DateTime(2019, 10, 7, 19, 47, 44, 371, DateTimeKind.Utc), ThreadId = "be00757b-8c5e-4717-af05-658a8c7f8039", UserId = "23d43032-30f1-4a0b-b553-4374d2352397" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.PrivateMessage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("From")
                        .IsRequired();

                    b.Property<string>("receiverId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("receiverId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Threads");

                    b.HasData(
                        new { Id = "097b47f6-2ca9-482a-a5ea-49c15e5112ab", CategoryId = "6378176c-7cdc-4244-9b01-9b8393d40def", DateCreated = new DateTime(2019, 10, 7, 21, 47, 44, 370, DateTimeKind.Local), Title = "Best Free AV" },
                        new { Id = "fab5cc4d-3c42-419a-a547-dbd49d41d451", CategoryId = "2a8b43b5-306f-4561-b32e-69018b8e6a69", DateCreated = new DateTime(2019, 10, 7, 21, 47, 44, 371, DateTimeKind.Local), Title = "New version of FireFox is released" },
                        new { Id = "be00757b-8c5e-4717-af05-658a8c7f8039", CategoryId = "8418e314-2f90-4927-a8f1-75676a0044c8", DateCreated = new DateTime(2019, 10, 7, 21, 47, 44, 371, DateTimeKind.Local), Title = "The best FPS game in 2019" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsItOnline");

                    b.Property<bool>("IsItSuspended");

                    b.Property<DateTime>("Joined");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "f6a3b03d-90b8-4dd4-ab61-1d93e22bc3ef", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "d7584e60-c278-4fbd-8c06-31e0e9c11132", Email = "ga@forum.com", EmailConfirmed = true, FullName = "Gjurgica Anastasovska", IsItOnline = false, IsItSuspended = false, Joined = new DateTime(2019, 10, 7, 21, 47, 44, 351, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "GA@FORUM.COM", NormalizedUserName = "GJURGICA", PasswordHash = "AQAAAAEAACcQAAAAENuRpZXMlFhSQ6UXER0aAAr9yJ9kCkO7fBAXq+Ma7yChlY9po5goPAPMhOiNIc9CqQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "gjurgica" },
                        new { Id = "23d43032-30f1-4a0b-b553-4374d2352397", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "72e82a3a-5ebc-487f-8ff6-3510c0177a4f", Email = "fm@forum.com", EmailConfirmed = true, FullName = "Florent Memedi", IsItOnline = false, IsItSuspended = false, Joined = new DateTime(2019, 10, 7, 21, 47, 44, 361, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "FM@FORUM.COM", NormalizedUserName = "FLORENT", PasswordHash = "AQAAAAEAACcQAAAAEJqeGFEWor19cs23dt8UQu7XHwlUdWPYuqYPH2nRrvYv0ZlozEgXVFz9baOCSozozQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "florent" },
                        new { Id = "7d61ae6a-c786-497e-9955-b144476f596f", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "3275c9a9-4b0d-4b3c-89f1-ea815f5457f9", Email = "vp@forum.com", EmailConfirmed = true, FullName = "Vladimir Prokopiev", IsItOnline = false, IsItSuspended = false, Joined = new DateTime(2019, 10, 7, 21, 47, 44, 370, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "VP@FORUM.COM", NormalizedUserName = "VLADIMIR", PasswordHash = "AQAAAAEAACcQAAAAEEjKsx6D4rUXFqDl9vvHw/LmX13Cadog/Z2/u5qCb125e1h/tIaycTNIe+i47lNjQw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "vladimir" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "5e10bb0e-5c55-4f4f-8c52-5ab5c1751523", ConcurrencyStamp = "c79d9a96-16e3-400a-931b-206ca843f6ad", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "dab6d0ec-60e0-4d8b-bf81-62d9a7334b17", ConcurrencyStamp = "a0c0b935-03b7-422b-a0e8-a3bba110e1f1", Name = "user", NormalizedName = "USER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "7d61ae6a-c786-497e-9955-b144476f596f", RoleId = "5e10bb0e-5c55-4f4f-8c52-5ab5c1751523" },
                        new { UserId = "f6a3b03d-90b8-4dd4-ab61-1d93e22bc3ef", RoleId = "5e10bb0e-5c55-4f4f-8c52-5ab5c1751523" },
                        new { UserId = "23d43032-30f1-4a0b-b553-4374d2352397", RoleId = "5e10bb0e-5c55-4f4f-8c52-5ab5c1751523" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Alert", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Thread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.PrivateMessage", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("receiverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Category", "Category")
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
