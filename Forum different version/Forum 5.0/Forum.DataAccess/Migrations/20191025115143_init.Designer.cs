// <auto-generated />
using System;
using Forum.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Forum.DataAccess.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    [Migration("20191025115143_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Forum.DomainClasses.Models.Alert", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PostId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = "aa0b05c2-378e-4fd4-b08e-d491986de36a", Title = "Software" },
                        new { Id = "fdb4759d-8052-437e-80b4-cd7c6f1cd3f5", Title = "Games" },
                        new { Id = "92184928-eae8-40af-aa57-b948fbf4b2a4", Title = "News" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ThreadId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new { Id = "d7c9a1b1-9463-4a9c-9dd0-92288dfece6d", Content = "The best free antivirus is Kaspersky Cloud Free", DateCreated = new DateTime(2019, 10, 25, 11, 51, 42, 864, DateTimeKind.Utc), ThreadId = "1559a0cf-95cb-406c-a359-3d603f0e09f1", UserId = "bd33909e-f7d4-4434-b8c3-8896173a505a" },
                        new { Id = "8a34f7ca-6bba-46ae-acba-2535334de0d7", Content = "Avast is another good free antivirus", DateCreated = new DateTime(2019, 10, 25, 11, 51, 42, 865, DateTimeKind.Utc), ThreadId = "1559a0cf-95cb-406c-a359-3d603f0e09f1", UserId = "356bd980-c826-455c-8cf5-64fd54a57c47" },
                        new { Id = "ed37484d-ee52-4ab0-b815-d0cc81f5dfc9", Content = "I hope they've pathed some of the security holes", DateCreated = new DateTime(2019, 10, 25, 11, 51, 42, 865, DateTimeKind.Utc), ThreadId = "13b7c725-9472-4919-b736-3fd68c84cf69", UserId = "356bd980-c826-455c-8cf5-64fd54a57c47" },
                        new { Id = "b754b16b-1ae3-4194-b152-f2ca557488df", Content = "Call of Duty: Modern Warfare is the best one so far.", DateCreated = new DateTime(2019, 10, 25, 11, 51, 42, 865, DateTimeKind.Utc), ThreadId = "a8d53df6-8066-4860-baa1-52063f9e2fef", UserId = "1bf9bf05-690b-4f95-8cf8-e3ce7c6aee30" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.PrivateMessage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("From")
                        .IsRequired();

                    b.Property<string>("receiverId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("receiverId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Threads");

                    b.HasData(
                        new { Id = "1559a0cf-95cb-406c-a359-3d603f0e09f1", CategoryId = "aa0b05c2-378e-4fd4-b08e-d491986de36a", DateCreated = new DateTime(2019, 10, 25, 13, 51, 42, 864, DateTimeKind.Local), Title = "Best Free AV" },
                        new { Id = "13b7c725-9472-4919-b736-3fd68c84cf69", CategoryId = "92184928-eae8-40af-aa57-b948fbf4b2a4", DateCreated = new DateTime(2019, 10, 25, 13, 51, 42, 864, DateTimeKind.Local), Title = "New version of FireFox is released" },
                        new { Id = "a8d53df6-8066-4860-baa1-52063f9e2fef", CategoryId = "fdb4759d-8052-437e-80b4-cd7c6f1cd3f5", DateCreated = new DateTime(2019, 10, 25, 13, 51, 42, 864, DateTimeKind.Local), Title = "The best FPS game in 2019" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsItOnline");

                    b.Property<bool>("IsItSuspended");

                    b.Property<DateTime>("Joined");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "356bd980-c826-455c-8cf5-64fd54a57c47", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "a0231b33-689e-47d2-880a-cc847cea278d", Email = "ga@forum.com", EmailConfirmed = true, FullName = "Gjurgica Anastasovska", IsItOnline = false, IsItSuspended = false, Joined = new DateTime(2019, 10, 25, 13, 51, 42, 845, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "GA@FORUM.COM", NormalizedUserName = "GJURGICA", PasswordHash = "AQAAAAEAACcQAAAAECu2QAZPJBrPOSd/OmLYkcCVDqAbLbLSjzhfL2NwgtoH13E101S0fXUCgTnQo6xuuA==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "gjurgica" },
                        new { Id = "1bf9bf05-690b-4f95-8cf8-e3ce7c6aee30", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "b42f2427-2a35-457a-91a3-2970229b01e3", Email = "fm@forum.com", EmailConfirmed = true, FullName = "Florent Memedi", IsItOnline = false, IsItSuspended = false, Joined = new DateTime(2019, 10, 25, 13, 51, 42, 856, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "FM@FORUM.COM", NormalizedUserName = "FLORENT", PasswordHash = "AQAAAAEAACcQAAAAEC4DQU7m2/g4YLcifgO4Vk8Wft36mYR/h4Y35zTvIYbmnhgkQJXd5kdhVTbYuDNHgw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "florent" },
                        new { Id = "bd33909e-f7d4-4434-b8c3-8896173a505a", AccessFailedCount = 0, Avatar = "/avatars/no-image.jpg", ConcurrencyStamp = "ba7f6115-45e2-4d57-9253-271235c56142", Email = "vp@forum.com", EmailConfirmed = true, FullName = "Vladimir Prokopiev", IsItOnline = false, IsItSuspended = false, Joined = new DateTime(2019, 10, 25, 13, 51, 42, 864, DateTimeKind.Local), LockoutEnabled = false, NormalizedEmail = "VP@FORUM.COM", NormalizedUserName = "VLADIMIR", PasswordHash = "AQAAAAEAACcQAAAAEI4ZCExSsMw2fJeomQT+2UzyhX7X3NYsKrUUeezjWFk2p3d/r7q39DbLTBHol3gdzQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "vladimir" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "a2fc4853-643b-499e-a905-2f76f8e42d8a", ConcurrencyStamp = "5d55cc9d-988c-41d9-adeb-4006ea5e0649", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "dda4b08f-21dd-406c-803c-cedc4e15f9d9", ConcurrencyStamp = "d46640b6-0cc8-4acd-8ba1-8e509e80ec5a", Name = "user", NormalizedName = "USER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "bd33909e-f7d4-4434-b8c3-8896173a505a", RoleId = "a2fc4853-643b-499e-a905-2f76f8e42d8a" },
                        new { UserId = "356bd980-c826-455c-8cf5-64fd54a57c47", RoleId = "a2fc4853-643b-499e-a905-2f76f8e42d8a" },
                        new { UserId = "1bf9bf05-690b-4f95-8cf8-e3ce7c6aee30", RoleId = "a2fc4853-643b-499e-a905-2f76f8e42d8a" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Alert", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Thread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.PrivateMessage", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("receiverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Category", "Category")
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
