// <auto-generated />
using System;
using Forum.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Forum.DataAccess.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    partial class ForumDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Forum.DomainClasses.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = "16e93eeb-b5a8-4f3d-ac9b-f8fa8d60b2d6", Title = "Software" },
                        new { Id = "35f0c546-c6ad-462b-ae6a-ef6115c86ba5", Title = "Games" },
                        new { Id = "3035942b-45e4-4303-b3f7-ac00c0f72dd9", Title = "News" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("ThreadId")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new { Id = "ced2abd0-890b-4e49-8e0a-b8936ccd974c", Content = "The best free antivirus is Kespersky Cloud Free", DateCreated = new DateTime(2019, 9, 23, 18, 6, 38, 439, DateTimeKind.Utc), ThreadId = "f5b5c082-c3c4-4b01-957e-b3bc05d800e3", UserId = "59c2bcf0-2f6b-47f0-b8f5-4a0f25f8bf48" },
                        new { Id = "15260da4-e295-4c1c-bd04-db40aa10580f", Content = "Avast is another good free antivirus", DateCreated = new DateTime(2019, 9, 23, 18, 6, 38, 439, DateTimeKind.Utc), ThreadId = "f5b5c082-c3c4-4b01-957e-b3bc05d800e3", UserId = "08f5c2ae-1756-44e5-975f-47bc59f4453a" },
                        new { Id = "994a6633-038c-4e18-b6a6-b1e4ba01e2f4", Content = "I hope they've pathed some of the security holes", DateCreated = new DateTime(2019, 9, 23, 18, 6, 38, 439, DateTimeKind.Utc), ThreadId = "a55073f8-7662-4f2e-be9c-d2de80176041", UserId = "08f5c2ae-1756-44e5-975f-47bc59f4453a" },
                        new { Id = "c8ccb460-f3cc-4c31-9e52-816e856de62a", Content = "Call of Duty: Modern Warfare is the best one so far.", DateCreated = new DateTime(2019, 9, 23, 18, 6, 38, 439, DateTimeKind.Utc), ThreadId = "879a82d9-9177-4b49-b9be-56fa0a994169", UserId = "cb4c99f9-91f3-4acf-a936-c0351963a9ea" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryId")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Threads");

                    b.HasData(
                        new { Id = "f5b5c082-c3c4-4b01-957e-b3bc05d800e3", CategoryId = "16e93eeb-b5a8-4f3d-ac9b-f8fa8d60b2d6", DateCreated = new DateTime(2019, 9, 23, 18, 6, 38, 439, DateTimeKind.Utc), Title = "Best Free AV" },
                        new { Id = "a55073f8-7662-4f2e-be9c-d2de80176041", CategoryId = "3035942b-45e4-4303-b3f7-ac00c0f72dd9", DateCreated = new DateTime(2019, 9, 23, 18, 6, 38, 439, DateTimeKind.Utc), Title = "New version of FireFox is released" },
                        new { Id = "879a82d9-9177-4b49-b9be-56fa0a994169", CategoryId = "35f0c546-c6ad-462b-ae6a-ef6115c86ba5", DateCreated = new DateTime(2019, 9, 23, 18, 6, 38, 439, DateTimeKind.Utc), Title = "The best FPS game in 2019" }
                    );
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsItOnline");

                    b.Property<DateTime>("Joined");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "08f5c2ae-1756-44e5-975f-47bc59f4453a", AccessFailedCount = 0, ConcurrencyStamp = "8269ac88-c691-483e-bf05-df3d9474855b", Email = "ga@forum.com", EmailConfirmed = true, FullName = "Gjurgica Anastasovska", IsItOnline = false, Joined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), LockoutEnabled = false, NormalizedEmail = "GA@FORUM.COM", NormalizedUserName = "GA", PasswordHash = "AQAAAAEAACcQAAAAEM51+IjeSk0D94wkdOySClgDoNJJHeiE0dWsJ1y5ghv157Xt/UBjIaX+/8GM+3hfKw==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "gjurgica" },
                        new { Id = "cb4c99f9-91f3-4acf-a936-c0351963a9ea", AccessFailedCount = 0, ConcurrencyStamp = "73ded647-9dfb-4d24-91a5-0f9f2fa1bd8d", Email = "fm@forum.com", EmailConfirmed = true, FullName = "Florent Memedi", IsItOnline = false, Joined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), LockoutEnabled = false, NormalizedEmail = "FM@FORUM.COM", NormalizedUserName = "FM", PasswordHash = "AQAAAAEAACcQAAAAEFYNM+YwDDeeemsukUmizaFu3UojLNOpoCy8jAEUNHnHawRGund7m1r4Ci2jIPNRwg==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "florent" },
                        new { Id = "59c2bcf0-2f6b-47f0-b8f5-4a0f25f8bf48", AccessFailedCount = 0, ConcurrencyStamp = "c212d3f6-2059-4d20-b4ce-40acf0b46eac", Email = "vp@forum.com", EmailConfirmed = true, FullName = "Vladimir Prokopiev", IsItOnline = false, Joined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), LockoutEnabled = false, NormalizedEmail = "VP@FORUM.COM", NormalizedUserName = "VP", PasswordHash = "AQAAAAEAACcQAAAAEKxAyITUZLMV3mVG1OivMMpt/4dcbs0Fr+dL9tbUdkrqVFNgasU7YWWccXfKJyjOaQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "vladimir" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "af43b576-7d5c-4ab3-b111-9377d6570837", ConcurrencyStamp = "10cb5d25-32f0-478a-8b21-7fb520c3233d", Name = "ADMIN", NormalizedName = "admin" },
                        new { Id = "40d8cc75-5a86-4d19-b71e-803479621e4a", ConcurrencyStamp = "e51dd7a0-3d1f-43de-8186-655809d5e3f6", Name = "USER", NormalizedName = "user" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Post", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Thread", "Thread")
                        .WithMany("Posts")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Forum.DomainClasses.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Forum.DomainClasses.Models.Thread", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.Category", "Category")
                        .WithMany("Threads")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Forum.DomainClasses.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
